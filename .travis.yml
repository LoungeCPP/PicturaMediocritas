language: generic
sudo: false
cache:
  apt: true
  directories:
    - /tmp/ffmpeg
    - /tmp/freeimage
git:
  submodules: false

env:
  global:
    - LIB_INSTALLDIR="$HOME"
    - PATH="$LIB_INSTALLDIR/bin:$PATH"
    - LD_LIBRARY_PATH="$LIB_INSTALLDIR/lib"
    - FREEIMAGE_VERSION=3.17.0

matrix:
  include:
    - env: LANGUAGE=C++ CXX=g++-5 CC=gcc-5
      addons:
        apt:
          packages:
            - g++-5
            - nasm
            - unzip
          sources: &sources
            - r-packages-trusty
            - llvm-toolchain-trusty
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-3.9
            - llvm-toolchain-trusty-4.0
            - llvm-toolchain-trusty-5.0
    - env: LANGUAGE=C++ CXX=g++-6 CC=gcc-6 DEPLOY=true DEPLOY_FILE="$TRAVIS_BUILD_DIR/../pictura-mediocritas-$TRAVIS_TAG"
      addons:
        apt:
          packages:
            - g++-6
            - nasm
            - unzip
          sources: *sources
    - env: LANGUAGE=C++ CXX="clang++-3.9 -stdlib=libc++" CC=clang-3.9
      addons:
        apt:
          packages:
            - clang-3.9
            - libc++-dev
            - nasm
            - unzip
          sources: *sources
    - env: LANGUAGE=C++ CXX="clang++-4.0 -stdlib=libc++" CC=clang-4.0
      addons:
        apt:
          packages:
            - clang-4.0
            - libc++-dev
            - nasm
            - unzip
          sources: *sources
    - env: LANGUAGE=C++ CXX="clang++-5.0 -stdlib=libc++" CC=clang-5.0
      addons:
        apt:
          packages:
            - clang-5.0
            - libc++-dev
            - nasm
            - unzip
          sources: *sources
    - env: LANGUAGE=Ruby DEPLOY=true DEPLOY_FILE="$TRAVIS_BUILD_DIR/../pictura-mediocritas-man-$TRAVIS_TAG.tbz2"
      language: ruby
      rvm: "2.2"
  allow_failures:
    - env: LANGUAGE=C++ CXX="clang++-5.0 -stdlib=libc++" CC=clang-5.0

before_install:
  - if [ "$TRAVIS_SECURE_ENV_VARS" == "true" ]; then
      openssl aes-256-cbc -K $encrypted_5d0d3df1866d_key -iv $encrypted_5d0d3df1866d_iv -in gh_rsa.enc -out gh_rsa -d;
    fi

install:
  - mkdir -p "$LIB_INSTALLDIR/include" "$LIB_INSTALLDIR/lib"
  - if [ "$LANGUAGE" == "C++" ] && [ ! -f "/tmp/freeimage/$FREEIMAGE_VERSION/libfreeimage.a" ]; then
      mkdir -p "$HOME"; pushd "$HOME";
      curl -SL "https://downloads.sourceforge.net/project/freeimage/Source Distribution/$FREEIMAGE_VERSION/FreeImage$(echo $FREEIMAGE_VERSION | sed 's/\.//g').zip" -o "FreeImage.zip";
      unzip "FreeImage.zip";
      cd FreeImage;
      sed -i 's/%\["#R"\]/%[" \#R "]/g' Source/LibWebP/src/dsp/dsp.upsampling_mips_dsp_r2.c;
      sed -i 's/"#R"/" \#R "/g' Source/LibWebP/src/dsp/dsp.yuv_mips_dsp_r2.c;
      cp Source/LibRawLite/internal/dcraw_common.cpp Source/LibRawLite/internal/dcraw_common.cpp.old;
      awk '
        BEGIN {
          replacing=0
        };
        /cp, terms/ {
          replacing=1
        };
        /chood/ {
          replacing=0
        };
        {
          if(replacing)
            $0 = gensub(/0x/, "(signed char)0x", "g");
          print
        }
      ' Source/LibRawLite/internal/dcraw_common.cpp.old > Source/LibRawLite/internal/dcraw_common.cpp;
      DESTDIR="$LIB_INSTALLDIR" make all;
      mkdir -p "/tmp/freeimage/$FREEIMAGE_VERSION/";
      cp "Dist/FreeImage.h" "Dist/libfreeimage.a" "/tmp/freeimage/$FREEIMAGE_VERSION/";
      popd;
    fi
  - if [ "$LANGUAGE" == "C++" ]; then
      cp "/tmp/freeimage/$FREEIMAGE_VERSION/FreeImage.h" "$LIB_INSTALLDIR/include/";
      cp "/tmp/freeimage/$FREEIMAGE_VERSION/libfreeimage.a" "$LIB_INSTALLDIR/lib/";
    fi
  - if [ "$LANGUAGE" == "C++" ]; then git submodule update --init --recursive; fi
  - if [ "$LANGUAGE" == "Ruby" ]; then gem install ronn; fi

script:
  - if [ "$LANGUAGE" == "C++" ] && [ -f "/tmp/ffmpeg/lib/libavcodec.a" ]; then
      mkdir -p "out/build";
      cp -r "/tmp/ffmpeg" "out/build/";
      find "out/build/ffmpeg" -exec touch -c {} \; ;
    fi
  - if [ "$LANGUAGE" == "C++" ]; then make ADDITIONAL_INCLUDE_DIR="$LIB_INSTALLDIR/include" ADDITIONAL_LINK_DIR="$LIB_INSTALLDIR/lib"; fi
  - if [ "$LANGUAGE" == "C++" ] && [ ! -L "out/build/ffmpeg" ]; then
      mkdir -p "/tmp";
      cp -r "out/build/ffmpeg" "/tmp/";
    fi
  -
  - if [ "$LANGUAGE" == "Ruby" ]; then
      mkdir man; pushd man;
      cp ../pictura-mediocritas.md .;
      ronn --organization="Lounge<C++>" pictura-mediocritas.md;
      man -l pictura-mediocritas.1 | cat;
      popd;
    fi

after_success:
  - if [ "$LANGUAGE" == "C++" ] && [ "$DEPLOY" ] && [ "$TRAVIS_TAG" ]; then
      cp "out/pictura-mediocritas" "$DEPLOY_FILE";
      strip --strip-all --remove-section=.comment --remove-section=.note "$DEPLOY_FILE";
    fi
  - if [ "$LANGUAGE" == "Ruby" ] && [ "$TRAVIS_SECURE_ENV_VARS" == "true" ]; then
      (
        echo "Update manual for commits $TRAVIS_COMMIT_RANGE";
        echo;
        git log $TRAVIS_COMMIT_RANGE --pretty=oneline;
      ) >> $TRAVIS_BUILD_DIR/../MAN_UPDATE_MSG;
      mkdir -p ~/.ssh && cp gh_rsa ~/.ssh/id_rsa && chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa;
      git clone -b man git@github.com:$TRAVIS_REPO_SLUG.git $TRAVIS_BUILD_DIR-man;
      cp -f man/* "$TRAVIS_BUILD_DIR-man";
      pushd "$TRAVIS_BUILD_DIR-man";
      git config --global user.email "nabijaczleweli@gmail.com";
      git config --global user.name "Nabijaczleweli Autouploader Bot";
      git config --global push.default simple;
      git add *;
      git commit -F $TRAVIS_BUILD_DIR/../MAN_UPDATE_MSG;
      git push;
      popd;
    fi
  - if [ "$LANGUAGE" == "Ruby" ] && [ "$TRAVIS_TAG" ]; then
      cp -r man "$TRAVIS_BUILD_DIR/../pictura-mediocritas-man-$TRAVIS_TAG";
      pushd "$TRAVIS_BUILD_DIR/..";
      tar -caf "pictura-mediocritas-man-$TRAVIS_TAG.tbz2" "pictura-mediocritas-man-$TRAVIS_TAG";
      rm -rf "pictura-mediocritas-man-$TRAVIS_TAG";
      popd;
    fi

deploy:
  provider: releases
  api-key:
    secure: jKKJHvnWlVzfHVn67OcSbtJTiDSHpAu7bMRs0Of64q2fqb6EAjL0l8+9ckgY1TnLU9AIXZrFJzkrt45t7qbWPb2ZsAUxd/O7n6cZuh+TDYkYj3SUsfNx9CAV8Gxb86GVogg1mXDuqYS+FKCK1lsfSV0y50bMkLz5oVtLP6Iq8/JkCugCO/XQluXCoE6tDH/lCVl3yLsgtG66Trv7bufLS05D9bnEAg/UvI4W4oxucnxRpwd0rSRCHi+rmaSjDVRFIvGTj8RzLtGm8SJTeedulT5CWXr7pvXxo19cnWSyXeRhjjrnV2aM3JEtDYerqeIW0e1TyRSs2q9oUmMFs1fQ2ZGwm5fLjeYSB2jVU637mdUnh/SmrvXQ5mv+IZTI/RejUm16qLqH4/IFlxkGmAwyhLtj0A+thula+PuZ2RMd2FfymVGvEklC7/hyWTjE3kJESc2uv0xph9iceJrLaQI4qXI++uJPVJntto7hoBEJWTLcc0nVvigjMLkCfmfifzb/KwItYyImHHjCs8dCYc771Oup3jEqHDprmiJtizp+mAi3cNIr3mCtspcll7cxELg9RBR9AUIhyql0FtfH1qatFQYB8KYyUMeLdmJRzkz023dCMznenkgIm/Pg7KzQjGxsRePJMA4qR4FxMOGnnvZMwziHh7DWQu6y7bpfMh8NVAw=
  file: "$DEPLOY_FILE"
  skip_cleanup: true
  on:
    tags: true
    condition: $DEPLOY = true
